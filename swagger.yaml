tags:
- name: Auth
  description: API Auth for admin
- name: auth
  description: authentication & authorization

paths:
  /api/signup:
    post:
      tags:
      - auth
      summary: Register new admin
      security:
        - cookieAuth: []
      parameters:
      - name: body
        in: body
        description: Admin registration data
        required: true
        schema:
          $ref: '#/definitions/admin'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict - Username already exists'
        500:
          description: 'Server Error'

  /api/login:
    post:
      tags:
      - auth
      summary: Login admin
      parameters:
      - name: body
        in: body
        description: Admin login credentials
        required: true
        schema:
          $ref: '#/definitions/admin'
      responses:
        200:
          description: 'OK'
          headers:
            Set-Cookie:
              type: string
              description: 'Authorization token'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict - Invalid credentials'
        500:
          description: 'Server Error'

  /api/logout:
    post:
      tags:
      - auth
      summary: Logout admin
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'
  /api/refresh-token:
    post:
      tags:
      - auth
      summary: refresh Admin token
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  /api/admins:
    get:
      tags:
      - Admin
      summary: Get all admins
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/admin'
              message:
                type: string
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  /api/admins/{id}:
    get:
      tags:
      - Admin
      summary: Find admin by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Admin ID
        required: true
        type: string
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/admin'
              message:
                type: string
        401:
          description: 'Unauthorized'
        409:
          description: 'Admin doesn''t exist'
        500:
          description: 'Server Error'

    put:
      tags:
      - Admin
      summary: Update admin by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Admin ID
        required: true
        type: string
      - name: body
        in: body
        description: Admin update data
        required: true
        schema:
          $ref: '#/definitions/admin'
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/admin'
              message:
                type: string
        401:
          description: 'Unauthorized'
        409:
          description: 'Admin doesn''t exist'
        500:
          description: 'Server Error'

    delete:
      tags:
      - Admin
      summary: Delete admin by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Admin ID
        required: true
        type: string
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/admin'
              message:
                type: string
        401:
          description: 'Unauthorized'
        409:
          description: 'Admin doesn''t exist'
        500:
          description: 'Server Error'

  # ... existing admin paths ...

securityDefinitions:
  cookieAuth:
    type: apiKey
    in: cookie
    name: Authorization

definitions:
  admin:
    type: object
    required:
        - username
        - password
    properties:
      username:
        type: string
        description: user username
      password:
        type: string
        description: user password
        format: password

schemes:
 - https
 - http
