tags:
- name: Auth
  description: API Auth for admin
- name: Admin
  description: Admin CRUD
- name: Students
  description: Students CRUD

paths:
  /api/signup:
    post:
      tags:
      - Auth
      summary: Register new admin
      security:
        - cookieAuth: []
      parameters:
      - name: body
        in: body
        description: Admin registration data
        required: true
        schema:
          $ref: '#/definitions/admin'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict - Username already exists'
        500:
          description: 'Server Error'

  /api/login:
    post:
      tags:
      - Auth
      summary: Login admin
      parameters:
      - name: body
        in: body
        description: Admin login credentials
        required: true
        schema:
          $ref: '#/definitions/admin'
      responses:
        200:
          description: 'OK'
          headers:
            Set-Cookie:
              type: string
              description: 'Authorization token'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict - Invalid credentials'
        500:
          description: 'Server Error'

  /api/logout:
    post:
      tags:
      - Auth
      summary: Logout admin
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'
  /api/refresh-token:
    post:
      tags:
      - Auth
      summary: refresh Admin token
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  /api/admins:
    get:
      tags:
      - Admin
      summary: Get all admins
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/admin'
              message:
                type: string
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  /api/admins/{id}:
    get:
      tags:
      - Admin
      summary: Find admin by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Admin ID
        required: true
        type: string
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/admin'
              message:
                type: string
        401:
          description: 'Unauthorized'
        409:
          description: 'Admin doesn''t exist'
        500:
          description: 'Server Error'

    put:
      tags:
      - Admin
      summary: Update admin by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Admin ID
        required: true
        type: string
      - name: body
        in: body
        description: Admin update data
        required: true
        schema:
          $ref: '#/definitions/admin'
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/admin'
              message:
                type: string
        401:
          description: 'Unauthorized'
        409:
          description: 'Admin doesn''t exist'
        500:
          description: 'Server Error'

    delete:
      tags:
      - Admin
      summary: Delete admin by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Admin ID
        required: true
        type: string
      responses:
        200:
          description: 'OK'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/admin'
              message:
                type: string
        401:
          description: 'Unauthorized'
        409:
          description: 'Admin doesn''t exist'
        500:
          description: 'Server Error'

  /api/students:
    get:
      tags:
      - Students
      summary: Get all students
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'Successfully retrieved students'
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Student'
              message:
                type: string
                example: "findAll"
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

    post:
      tags:
      - Students
      summary: Create new student
      security:
        - cookieAuth: []
      parameters:
      - name: body
        in: body
        description: Student creation data
        required: true
        schema:
          $ref: '#/definitions/CreateStudent'
      responses:
        201:
          description: 'Student created successfully'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Student'
              message:
                type: string
                example: "created"
        400:
          description: 'Bad Request - Invalid input'
        401:
          description: 'Unauthorized'
        409:
          description: 'Conflict - Phone number already exists'
        500:
          description: 'Server Error'

  /api/students/{id}:
    get:
      tags:
      - Students
      summary: Get student by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Student ID
        required: true
        type: string
      responses:
        200:
          description: 'Successfully retrieved student'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Student'
              message:
                type: string
                example: "findOne"
        401:
          description: 'Unauthorized'
        404:
          description: 'Student not found'
        500:
          description: 'Server Error'

    put:
      tags:
      - Students
      summary: Update student by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Student ID
        required: true
        type: string
      - name: body
        in: body
        description: Student update data
        required: true
        schema:
          $ref: '#/definitions/CreateStudent'
      responses:
        200:
          description: 'Student updated successfully'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Student'
              message:
                type: string
                example: "updated"
        400:
          description: 'Bad Request - Invalid input'
        401:
          description: 'Unauthorized'
        404:
          description: 'Student not found'
        500:
          description: 'Server Error'

    delete:
      tags:
      - Students
      summary: Delete student by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Student ID
        required: true
        type: string
      responses:
        200:
          description: 'Student deleted successfully'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Student'
              message:
                type: string
                example: "deleted"
        401:
          description: 'Unauthorized'
        404:
          description: 'Student not found'
        500:
          description: 'Server Error'

  /api/courses:
    get:
      tags:
      - Courses
      summary: Get all courses
      security:
        - cookieAuth: []
      responses:
        200:
          description: 'Successfully retrieved courses'
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Course'
              message:
                type: string
                example: "success"
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

    post:
      tags:
      - Courses
      summary: Create new course
      security:
        - cookieAuth: []
      parameters:
      - name: body
        in: body
        description: Course creation data
        required: true
        schema:
          $ref: '#/definitions/CreateCourse'
      responses:
        201:
          description: 'Course created successfully'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Course'
              message:
                type: string
                example: "success"
        400:
          description: 'Bad Request - Invalid input'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'
  /api/courses/enroll-student:
    post:
      tags:
      - Courses
      summary: Register new student to course
      security:
        - cookieAuth: []
      parameters:
      - name: body
        in: body
        description: Enroll student data
        required: true
        schema:
          $ref: '#/definitions/EnrollStudent'
      responses:
        201:
          description: 'Course created successfully'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/ResEnrollStudent'
              message:
                type: string
                example: "success"
        400:
          description: 'Bad Request - Invalid input'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

  /api/courses/{id}:
    get:
      tags:
      - Courses
      summary: Get course by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Course ID
        required: true
        type: string
      responses:
        200:
          description: 'Successfully retrieved course'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Course'
              message:
                type: string
                example: "success"
        401:
          description: 'Unauthorized'
        404:
          description: 'Course not found'
        500:
          description: 'Server Error'

    put:
      tags:
      - Courses
      summary: Update course by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Course ID
        required: true
        type: string
      - name: body
        in: body
        description: Course update data
        required: true
        schema:
          $ref: '#/definitions/CreateCourse'
      responses:
        200:
          description: 'Course updated successfully'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Course'
              message:
                type: string
                example: "success"
        400:
          description: 'Bad Request - Invalid input'
        401:
          description: 'Unauthorized'
        409:
          description: "Course doesn't exist"
        500:
          description: 'Server Error'

    delete:
      tags:
      - Courses
      summary: Delete course by ID
      security:
        - cookieAuth: []
      parameters:
      - name: id
        in: path
        description: Course ID
        required: true
        type: string
      responses:
        200:
          description: 'Course deleted successfully'
          schema:
            type: object
            properties:
              data:
                $ref: '#/definitions/Course'
              message:
                type: string
                example: "success"
        401:
          description: 'Unauthorized'
        409:
          description: "Course doesn't exist"
        500:
          description: 'Server Error'


securityDefinitions:
  cookieAuth:
    type: apiKey
    in: cookie
    name: Authorization

definitions:
  admin:
    type: object
    required:
        - username
        - password
    properties:
      username:
        type: string
        example: "Admin@123"
        description: user username
      password:
        type: string
        example: "Admin@123"
        description: user password
        format: password
  Student:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: "123e4567-e89b-12d3-a456-426614174000"
      first_name:
        type: string
        example: "John"
      last_name:
        type: string
        example: "Doe"
      phone_number:
        type: string
        example: "+998901234567"
      created_at:
        type: integer
        example: 1741919375491
        description: "Timestamp in milliseconds since epoch"
      updated_at:
        type: integer
        example: 1741919375491
        description: "Timestamp in milliseconds since epoch"

  CreateStudent:
    type: object
    required:
      - first_name
      - last_name
      - phone_number
    properties:
      first_name:
        type: string
        example: "John"
      last_name:
        type: string
        example: "Doe"
      phone_number:
        type: string
        example: "+998901234567"
  Course:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: "123e4567-e89b-12d3-a456-426614174000"
      course_name:
        type: string
        example: "Advanced JavaScript"
      teacher_name:
        type: string
        example: "John Smith"
      start_time:
        type: integer
        example: 1741919375491
        description: "Course start timestamp in milliseconds"
      start_hour:
        type: string
        example: "14:00"
      weeks:
        type: array
        items:
          type: string
          enum: [mon, tue, wed, thu, fri, sat, sun]
        example: ["mon", "fri"]

      created_at:
        type: integer
        example: 1741919375491
        description: "Timestamp in milliseconds since epoch"
      updated_at:
        type: integer
        example: 1741919375491
        description: "Timestamp in milliseconds since epoch"

  CreateCourse:
    type: object
    required:
      - course_name
      - teacher_name
      - start_time
      - start_hour
      - weeks
    properties:
      course_name:
        type: string
        example: "Advanced JavaScript"
      teacher_name:
        type: string
        example: "John Smith"
      start_time:
        type: integer
        example: 1741919375491
      start_hour:
        type: string
        example: "14:00"
      weeks:
        type: array
        items:
          type: string
          enum: [mon, tue, wed, thu, fri, sat, sun]
        example: ["mon", "fri", "wed", "thu", "fri", "sat", "sun"]

  EnrollStudent:
    type: object
    required:
      - course_id
      - student_id
    properties:
      course_id:
        type: string
        example: "123e4567-e89b-12d3-a456-426614174000"
      student_id:
        type: string
        example: "123e4567-e89b-12d3-a456-426614174000"
  ResEnrollStudent:
    type: object
    properties:
      data:
        type: object
        properties:
          student:
            type: object
            properties:
              id:
                type: string
                example: "febcfabe-0cc4-4210-b0ba-d56b8a91d763"
              is_active:
                type: boolean
                example: true
              is_deleted:
                type: boolean
                example: false
              created_at:
                type: string
                example: "1741951208310"
              updated_at:
                type: string
                example: "1741951141005"
              deleted_at:
                type: string
                nullable: true
                example: null
              first_name:
                type: string
                example: "John"
              last_name:
                type: string
                example: "Doe"
              phone_number:
                type: string
                example: "+998901234567"
          course:
            type: object
            properties:
              id:
                type: string
                example: "02d06d3a-3c3c-4bd4-8f40-38f79b58e7b2"
              is_active:
                type: boolean
                example: true
              is_deleted:
                type: boolean
                example: false
              created_at:
                type: string
                example: "1741951250498"
              updated_at:
                type: string
                example: "1741951141005"
              deleted_at:
                type: string
                nullable: true
                example: null
              course_name:
                type: string
                example: "Advanced JavaScript"
              teacher_name:
                type: string
                example: "John Smith"
              start_time:
                type: string
                example: "1741919375491"
              start_hour:
                type: string
                example: "14:00"
              weeks:
                type: array
                items:
                  type: string
                example: ["mon", "fri", "wed", "thu", "fri", "sat", "sun"]
          deleted_at:
            type: string
            nullable: true
            example: null
          id:
            type: string
            example: "e30accaf-a174-4e9f-a68c-8c85232f304a"
          is_active:
            type: boolean
            example: true
          is_deleted:
            type: boolean
            example: false
          created_at:
            type: string
            example: "1741951267301"
          updated_at:
            type: string
            example: "1741951141005"
      message:
        type: string
        example: "success"



schemes:
 - https
 - http
